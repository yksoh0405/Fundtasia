@using PagedList
@using PagedList.Mvc
@model IPagedList<User>
@{
    User loginUser = (User)Session["UserSession"];
    var ao = new AjaxOptions
    {
        UpdateTargetId = "target",
        LoadingElementId = "loader",
        OnSuccess = "highlight"
    };
    string[] fields = null;
    if (String.Equals(loginUser.Role, "Admin"))
    {
        fields = new string[] { "First Name", "Last Name", "Verified", "Status", "Last Login Time", "Role", "Edit" };
    }
    else
    {
        fields = new string[] { "First Name", "Last Name", "Verified", "Status", "Last Login Time", "Role" };
    }
    string sort = Request.Params["sort"];
    string sortdir = Request.Params["sortdir"];
    string keyword = Request.Params["keyword"];
}
<table class="table text-nowrap">
    <tr>
        @foreach (var f in fields)
        {
            string d = "ASC";
            string c = "";

            if (f == sort)
            {
                d = sortdir == "DESC" ? "ASC" : "DESC";
                c = sortdir;
            }

            <th>
                @Ajax.ActionLink(f, null, new { sort = f, sortdir = d }, ao, new { @class = c })
            </th>
        }
    </tr>
    @foreach (var s in Model)
    {
        if (!String.Equals(s.Role, "User"))
        {
            if (!String.Equals(s.Id, loginUser.Id))
            {
                string verified = s.IsEmailVerified.ToString() == "True" ? "True" : "False";
                string dateTime = s.LastLoginTime.ToString() == null ? "-" : s.LastLoginTime.ToString();
                <tr>
                    <td>@s.FirstName</td>
                    <td>@s.LastName</td>
                    <td>@verified</td>
                    <td>@s.Status</td>
                    <td>@dateTime</td>
                    <td>@s.Role</td>
                    @if (String.Equals(loginUser.Role, "Admin"))
                    {
                        <td><button type="button" class="btn btn-success text-white" data-get="/AEdit/EditStaff/@s.Id">Edit</button></td>
                    }
                </tr>
            }

        }
    }
</table>

@{
    var po = PagedListRenderOptions.ClassicPlusFirstAndLast;
    po.LinkToFirstPageFormat = "First";
    po.LinkToLastPageFormat = "Last";
    po.LinkToPreviousPageFormat = "Previous";
    po.LinkToNextPageFormat = "Next";
}

<div class="mx-auto">
    @Html.PagedListPager(
        Model,
        p => $"?sort={sort}&sortdir={sortdir}&page={p}",
        PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(po, ao)
    )
</div>
